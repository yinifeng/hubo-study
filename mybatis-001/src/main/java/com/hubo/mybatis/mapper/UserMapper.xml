<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	Mapper 接口代理方式
	namespace 要和接口类名一样
 -->
<mapper namespace="com.hubo.mybatis.mapper.UserMapper">
	
	
	<!-- sql块 可以作为全局的 查询参数
		可以 引入外部的mapper 需加上namespace
		id:sql片段的唯一标识
		经验:基于单表来定义sql片段，这样话这个sql片段可重用性高
		在sql片段中不要包括where
	 -->
	<sql id="query_user_where">
			<if test="userCustomer!=null">
				<if test="userCustomer.sex!=null and userCustomer.sex!=''">
					and user.sex=#{userCustomer.sex}
				</if>
				<if test="userCustomer.username!=null and userCustomer.username!=''">
					and user.username like '%${userCustomer.username}%'
				</if>
				
				<!-- 
					1:and (id=1 or id=2 or id=3 )
					2:and id in (1,2,3)
				 -->
				<!-- <foreach collection="ids" item="user_id" open="and (" close=" )" separator="or">
					id=#{user_id}
				</foreach> -->
				
				<foreach collection="ids" item="user_id" open="and id in (" close=" )" separator=",">
					#{user_id}
				</foreach>
				
			</if>
	</sql>
	
	<!-- 动态sql拼接 -->
	<select id="findUser" parameterType="com.hubo.mybatis.pojo.UserQueryVo" resultType="int">
		select count(*) from user 
		
		<!-- 动态sql条件判断拼接
			where 可以帮我们把 前面and 去掉
		 -->
		 <!-- 可以写成sql块 -->
	<!-- 	<where>
			<if test="userCustomer!=null">
				<if test="userCustomer.sex!=null and userCustomer.sex!=''">
					and user.sex=#{userCustomer.sex}
				</if>
				<if test="userCustomer.username!=null and userCustomer.username!=''">
					and user.username like '%${userCustomer.username}%'
				</if>
			</if>
		</where> -->
		
		<!-- 
			sql片段的引用
		 -->
		 <where>
		 	<!-- 
		 		若引用外部的sql片段
		 		需加上namespace
		 	 -->
		 	<include refid="query_user_where"></include>
		 </where>
	</select>
	
	<!-- 
		定义查询列和 pojo映射 
		若定义在外部mapper.xml文件中需要加namespace
	 -->
	<resultMap type="user" id="userMap">
		<!-- id 唯一标识数据 -->
		<!-- <id column="id_" property="id"/> -->
		<result column="username_" property="username"/>
		<result column="address_" property="address"/>
	</resultMap>
	<!-- 
		测试resultMap
	 -->
	<select id="findUserMap" parameterType="int" resultMap="userMap">
		select id id_,username username_,address address_ from user where id=#{id}
	</select>
	<!-- 
		测试 resultType 基本数据类型
	 -->
	<select id="findUserCount" parameterType="com.hubo.mybatis.pojo.UserQueryVo" resultType="int">
		select count(*) from user where user.sex=#{userCustomer.sex} and user.username like '%${userCustomer.username}%'
	</select>
	
	<!-- 
		用户综合查询
		输入参数 和参数 使用包装类
	 -->
	<select id="findUserList" parameterType="com.hubo.mybatis.pojo.UserQueryVo"
		resultType="com.hubo.mybatis.pojo.UserCustomer">
		select * from user where user.sex=#{userCustomer.sex} and user.username like '%${userCustomer.username}%'
	</select>
	
	<!-- 
		#{id} 占位符
	 -->
	<select id="findUserById" parameterType="int" resultType="User">
		SELECT * FROM USER WHERE ID=#{id}
	</select>
	
	<!-- 
		使用${}拼接sql，会有sql注入隐患
		${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
	 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="com.hubo.mybatis.pojo.User">
		SELECT * FROM USER WHERE username LIKE '%${value}%';
	</select>
	
	<!-- 插入数据 -->
	<insert id="insertUser" parameterType="com.hubo.mybatis.pojo.User" >
	
		<!-- 
			获取插入数据后的主键
			1、mysql自增    相对insert语句after
			2、oracle 序列     select 序列.nextval()  相对insert语句 before
		 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		
		INSERT INTO USER(username,birthday,sex,address) VALUE (#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<!-- 删除数据 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
	
	<!-- 更新数据 -->
	<update id="updateUser" parameterType="com.hubo.mybatis.pojo.User">
		UPDATE USER SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} WHERE id=#{id}
	</update>
</mapper>