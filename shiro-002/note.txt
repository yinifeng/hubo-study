1.授权要继承AuthorizingRealm 类，并且实现其doGetAuthorizationInfo 方法
2.AuthorizingRealm 类继承自 AuthenticatingRealm ，但没有实现 .AuthenticatingRealm中的
doGetAuthorizationInfo，所以认证和授权只需要继承AuthorizingRealm 就可以了。同时实现两个抽象方法


1.为什么要使用MD5 盐值加密：
2.如何做到：
1).在doGetAuthenticationInfo 方法返回值创建 SimpleAuthenticationInfo 对象的时候，需要使用
new SimpleAuthenticationInfo(principal, hashedCredentials, credentialsSalt, realmName) 构造器
2).使用ByteSource.Util.bytes()来计算盐值。
3).盐值需要唯一:一般使用随机字符串或 user id
4).使用new SimpleHash(algorithmName, source, salt, hashIterations);来计算盐值加密后的密码的值

1.如何把一个字符串密码加密为MD5
2.替换当前的Realm 的CredentialsMatcher属性。直接使用HashedCredentialsMatcher对象，并设置加密算法即可

比对密码：
AuthenticatingRealm的getCredentialsMatcher()方法来比对密码

1.获取当前的Subject。调用SecurityUtils.getSubject();
2.测试当前用户是否已经被验证，即是否已经登录。调用Subject的isAuthenticated()
3.若没有被认证，则把用户和密码封装为UsernamePasswordToken对象
1).创建一个表单页面
2).把请求提交到SpringMVC的Handler
3).获取用户名和密码。
4.执行登录：调用Subject 的login(UsernamePasswordToken) 方法。
5.自定义Realm 的方法，从数据库中获取对应的记录，返回给Shiro
1).实际上自定义Realm需要继承org.apache.shiro.realm.AuthenticatingRealm
2).实现doGetAuthenticationInfo(AuthenticationToken)方法
6.由shiro完成对密码的比对