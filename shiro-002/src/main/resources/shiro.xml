<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <!-- 
    	1.配置securityManager  
     -->     
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- <property name="realm" ref="jdbcRealm"/> -->
        <!-- 配置多个Realm 或 配置验证策虐 -->
        <property name="authenticator" ref="authenticator"></property>
        
        <property name="realms">
			<list>
				<ref bean="jdbcRealm"/>
				<ref bean="secodRealm"/>
			</list>
		</property>
        <!-- 设置记住登录时长  10s-->
        <property name="rememberMeManager.cookie.maxAge" value="10"></property>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!-- 
    	2.配置cacheManager
    	2.1 需加入ehcahe的jar包和配置文件  
     -->       
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.: -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!-- 
    	3.配置Realm 
    	目前实现Realm这个接口的类
     -->      
    <bean id="jdbcRealm" class="com.hubo.shiro.realms.ShiroRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
    </bean>
    <!-- 多个Realm测试 -->
    <bean id="secodRealm" class="com.hubo.shiro.realms.SecodRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="SHA1"></property>
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
    </bean>
	
	<!-- 配置多个Realm -->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<!-- 授权需要使用realms 此处可以配置到securityManager 
			这样配置 通过setRealms 方法 设置securityManager 的realms 到ModularRealmAuthenticator
		 -->
		<!-- <property name="realms">
			<list>
				<ref bean="jdbcRealm"/>
				<ref bean="secodRealm"/>
			</list>
		</property> -->
		<!-- 配置认证策虐，配置多个Realm 是否要全部认证通过，默认只通过一个就认证通过 -->
		<property name="authenticationStrategy">
			<!-- <bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean> -->
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
	</bean>
    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
     <!-- 
     	4.配置lifecycleBeanPostProcessor，可以自动的来调用在Spring IOC 容器shiro bean的生命周期方法
      -->       
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!-- 
    	5.启用IOC 容器中使用shiro注解，但必须在配置了lifecycleBeanPostProcessor之后才可以使用
     -->     
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!-- 
    	6.配置shiroFilter
    	6.1 id必须和web.xml 文件中配置DelegatingFilterProxy的filter-name一致
     -->     
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 登录页面 -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 登录成功页面 -->
        <property name="successUrl" value="/list.jsp"/>
        <!-- 没有权限页面 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- 配置实例工厂 获取一个linkedHashMap -->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
        <!-- 
        	配置哪些页面需要受保护
        	以及访问这些页面需要的权限
        	1）anon 可以被匿名访问
        	2）authc 必须认证（即登录后）才可能访问的页面
        	3)logout 登出
        	4)配置roles 拦截器 按角色拦截 如 roles[admin] 只能admin才能登陆admin的页面
         -->
<!--    <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /shiro/login = anon
                /shiro/logout = logout
                /user.jsp=roles[user]
                /admin.jsp=roles[admin]
                # everything else requires authentication:
                /** = authc
            </value>
        </property> -->
    </bean>
	
	<!-- 配置一个bean，该bean实际上是一个Map，通过实例工厂方法的方式  随着IOC容器启动执行这个方法-->
	<bean id="filterChainDefinitionMap" 
	factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"></bean>
	
	<bean id="filterChainDefinitionMapBuilder" class="com.hubo.shiro.factory.FilterChainDefinitionMapBuilder"></bean>
</beans>
